/*
Longest Palindromic Substring.

Time Complexity: O(n^2) Expanding around center is O(n) and we do this for all chars in the for loop O(n)
Space Complexity O(1) 
*/

function longestPalindrome(s){
  let startIndex = 0;
  let maxLength = 1;
  
  function expandAroundMiddle(left, right){
    while( left >= 0 && right < s.length && s[left] === s[right]){
      const currentPalLength = right - left + 1;
      if(currentPalLength > maxLength){
        maxLength = currentPalLength;
        startIndex = left;
      }
      left --;
      right++;      
    }
  }
  
  for(let i=0; i< s.length;i++){
    expandAroundMiddle(i-1,i+1);
    expandAroundMiddle(i,i+1);
  }
  
  return s.slice(startIndex, startIndex + maxLength);
}
